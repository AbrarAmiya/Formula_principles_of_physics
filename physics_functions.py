# -*- coding: utf-8 -*-
"""task4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QZHQVCTY7c-RyJ3REHaIVlgAVH_C2xfP
"""

def partition(arr, low, high):
    pivot = arr[high]
    i = low - 1

    for j in range(low, high):
        if arr[j] <= pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]

    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    return i + 1

def quickSelect(arr, low, high, k):
    if low == high:
        return arr[low]

    pivot = partition(arr, low, high)
    if k == pivot + 1:
        return arr[pivot]
    elif k < pivot + 1:
        return quickSelect(arr, low, pivot - 1, k)
    else:
        return quickSelect(arr, pivot + 1, high, k)

with open("input4.txt", "r") as input_file:
    lines = input_file.readlines()

N = int(lines[0].split("//")[0].strip())
numbers_line = lines[1].split("//")[0].strip().split()
numbers = [int(number) for number in numbers_line]

Q = int(lines[3].split("//")[0].strip())
queries = []
for line in lines[4:]:
    if line.strip():
        queries.append(int(line.strip().split("//")[0]))

results = []
for k in queries:
    kth_smallest = quickSelect(numbers, 0, N - 1, k)
    results.append(kth_smallest)

with open("output4.txt", "w") as output_file:
    output_file.write(str(N) + "\n")
    for result in results:
        output_file.write(str(result) + "\n")