# -*- coding: utf-8 -*-
"""Flux.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tbti84sIx8APTB_sYmEoYZLWa_tSXFqU
"""

!pip install numpy

!pip install matplotlib

import numpy as np
import matplotlib.pyplot as plt

# Define the grid
x = np.linspace(-5, 5, 10)
y = np.linspace(-5, 5, 10)
X, Y = np.meshgrid(x, y)

# Define the vector field (flux)
U = 2 * X
V = 3 * Y

# Create the plot
fig, ax = plt.subplots()
ax.quiver(X, Y, U, V)

# Customize the plot
ax.set_xlim([-6, 6])
ax.set_ylim([-6, 6])
ax.set_aspect('equal')  # Equal scaling for x and y axes
ax.axhline(0, color='black', lw=0.5)  # Add x-axis
ax.axvline(0, color='black', lw=0.5)  # Add y-axis
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_title('Flux Visualization')

# Display the plot
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# Define the grid with increased density
x = np.linspace(-5, 5, 50)
y = np.linspace(-5, 5, 50)
X, Y = np.meshgrid(x, y)

# Define the vector field (flux)
def calculate_flux(t):
    # Vary the flux with time
    theta = 2 * np.pi * t / 10
    U = np.cos(theta) * X
    V = np.sin(theta) * Y
    return U, V

# Create the figure and axes
fig, ax = plt.subplots()
ax.set_xlim([-6, 6])
ax.set_ylim([-6, 6])
ax.set_aspect('equal')
ax.axhline(0, color='black', lw=0.5)
ax.axvline(0, color='black', lw=0.5)
ax.set_xlabel('x')
ax.set_ylabel('y')
ax.set_title('Flux Animation')

# Calculate the initial flux
U_init, V_init = calculate_flux(0)
# Calculate the magnitude of the vectors
magnitude = np.sqrt(U_init**2 + V_init**2)

# Create the quiver plot with initial values and colors
quiver = ax.quiver(X, Y, U_init, V_init, magnitude, cmap='coolwarm', alpha=0.8)

# Update function for animation
def update(t):
    U, V = calculate_flux(t)
    # Update the magnitude and direction of the vectors
    magnitude = np.sqrt(U**2 + V**2)
    quiver.set_UVC(U, V, magnitude)
    return quiver,

# Create the animation
animation = FuncAnimation(fig, update, frames=np.arange(0, 10), interval=200, blit=True)

# Display the animation
plt.show()